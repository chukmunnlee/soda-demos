connectors:
  spanmetrics: {}

extensions:
  health_check:
    endpoint: ${env:MY_POD_IP}:13133

receivers:
  httpcheck/frontend-proxy:
    targets:
    - endpoint: http://frontend-proxy:8080
  jaeger:
    protocols:
      grpc:
        endpoint: ${env:MY_POD_IP}:14250
      thrift_compact:
        endpoint: ${env:MY_POD_IP}:6831
      thrift_http:
        endpoint: ${env:MY_POD_IP}:14268
  otlp:
    protocols:
      grpc:
        endpoint: ${env:MY_POD_IP}:4317
      http:
        cors:
          allowed_origins:
          - http://*
          - https://*
        endpoint: ${env:MY_POD_IP}:4318
  prometheus:
    config:
      scrape_configs:
      - job_name: opentelemetry-collector
        scrape_interval: 10s
        static_configs:
        - targets:
          - ${env:MY_POD_IP}:8888
  redis:
    collection_interval: 10s
    endpoint: valkey-cart:6379
  zipkin:
    endpoint: ${env:MY_POD_IP}:9411

processors:
  batch: {}
  k8sattributes:
    extract:
      metadata:
      - k8s.namespace.name
      - k8s.deployment.name
      - k8s.statefulset.name
      - k8s.daemonset.name
      - k8s.cronjob.name
      - k8s.job.name
      - k8s.node.name
      - k8s.pod.name
      - k8s.pod.uid
      - k8s.pod.start_time
    passthrough: false
    pod_association:
    - sources:
      - from: resource_attribute
        name: k8s.pod.ip
    - sources:
      - from: resource_attribute
        name: k8s.pod.uid
    - sources:
      - from: connection
  memory_limiter:
    check_interval: 5s
    limit_percentage: 80
    spike_limit_percentage: 25
  resource:
    attributes:
    - action: insert
      from_attribute: k8s.pod.uid
      key: service.instance.id
  transform:
    error_mode: ignore
    trace_statements:
    - context: span
      statements:
      - replace_pattern(name, "\\?.*", "")
      - replace_match(name, "GET /api/products/*", "GET /api/products/{productId}")

exporters:
  debug: {}
  opensearch:
    http:
      endpoint: http://opensearch:9200
      tls:
        insecure: true
    logs_index: otel
  otlp:
    endpoint: jaeger-collector:4317
    tls:
      insecure: true
  otlphttp/prometheus:
    endpoint: http://prometheus:9090/api/v1/otlp
    tls:
      insecure: true
  otlphttp/loki:
    endpoint: http://loki:3100/otlp
    tls:
      insecure: true
      
  # Tempo
  otlp/tempo:
    endpoint: tempo:4317
    tls:
      insecure: true
      insecure_skip_verify: true
    sending_queue:
      queue_size: 5000
    retry_on_failure:
      initial_interval: 5s
      max_interval: 30s
      max_elapsed_time: 10m

service:
  extensions:
  - health_check
  pipelines:
    logs:
      exporters:
      - opensearch
      - debug
      - otlphttp/loki
      processors:
      - k8sattributes
      - memory_limiter
      - resource
      - batch
      receivers:
      - otlp
    metrics:
      exporters:
      - otlphttp/prometheus
      - debug
      processors:
      - k8sattributes
      - memory_limiter
      - resource
      - batch
      receivers:
      - httpcheck/frontend-proxy
      - redis
      - otlp
      - spanmetrics
    traces:
      exporters:
      - otlp
      - debug
      - spanmetrics
      # Tempo
      - otlp/tempo
      processors:
      - k8sattributes
      - memory_limiter
      - resource
      - transform
      - batch
      receivers:
      - otlp
      - jaeger
      - zipkin
  telemetry:
    metrics:
      address: ${env:MY_POD_IP}:8888
      level: detailed
      readers:
      - periodic:
          exporter:
            otlp:
              endpoint: otel-collector:4318
              protocol: grpc
          interval: 10000
          timeout: 5000
